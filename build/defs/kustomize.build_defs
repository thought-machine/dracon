"""Build rules for working with Kustomize (https://kustomize.io)
"""

def kustomized_config(
    name: str,
    srcs: list = [],
    images: list = [],
    visibility: list = [],
    kube_score_ignored_tests: list = [],
):
    """Build rule for building Kustomize projects.

    Args:
        name: The name of the build rule.
        srcs: The source kustomize resources including the kustomization.yaml
        images: The docker images that the resources use that will be replaced with development references.
        visibility: The targets to make the kustomized configuration visible to.
        kube_score_ignored_tests: The kube_score tests to skip.
    """
    replace_images_rule=_replace_images_cmd(name, images)
    replace_srcs_rule=_replace_srcs_cmd(name, srcs)

    kustomized_rule=genrule(
        name = name,
        srcs = srcs,
        outs = [f"{name}_kustomized.yaml"],
        cmd = f"""
set -euo pipefail
cp $PKG/* .
kustomization_file="kustomization.yaml"
if [ ! -f "${kustomization_file}" ]; then
    echo "missing kustomization file in $PKG"
    exit 1
fi
$(exe {replace_images_rule})
$(exe {replace_srcs_rule})
$(exe {CONFIG.KUSTOMIZE_TOOL}) build . > $HOME/$OUTS
        """,
        tools = [
            CONFIG.KUSTOMIZE_TOOL,
            replace_images_rule,
            replace_srcs_rule,
        ],
        visibility = visibility,
    )

    _kube_score(name, kustomized_rule, kube_score_ignored_tests)

    sh_cmd(
        name = f"{name}_push",
        data = [kustomized_rule],
        cmd = f"trap cleanup 1 2 3 6; cleanup() {{ set +x; }}; set -x; kubectl apply \\\$@ -f $(out_location {kustomized_rule})",
    )

    return kustomized_rule

def _replace_images_cmd(name: str, images: list):
    return genrule(
        name = f"{name}_replace_images",
        srcs = [f"{image}_fqn" for image in images],
        outs = [f"{name}_replace_images.sh"],
        binary = True,
        cmd = """
set -euo pipefail
echo '#!/bin/bash\nset -euo pipefail\n' > $OUTS
for fqn_file in $SRCS; do
    fqn=$(<$fqn_file)
    repository=$(echo $fqn | cut -f1 -d\:)
    cat <<EOF >> $OUTS

if ! grep -r "${repository}"; then
    echo "could not find any usage of ${repository}"
    exit 1
fi
find . -type f -exec sed -i 's#${repository}.*#"${fqn}"#g' {} \;

EOF

done
        """
    )

def _replace_srcs_cmd(name: str, srcs: list):
    src_to_location_cmds=[f"find . -type f -exec sed -i 's#{target}#$(location {target})#g' {{}} +" for target in srcs]
    return sh_cmd(
        name = f"_{name}_replace_srcs",
        srcs = srcs,
        shell = "/bin/bash",
        cmd = "set -euo pipefail;" + "\n".join(src_to_location_cmds)
    )

def _kube_score(
    name: str, 
    kustomized_rule: str,
    kube_score_ignored_tests: list = [],
):
    if CONFIG.KUBE_SCORE_TOOL == "":
        return
    ignore_test_flags=[f"--ignore-test {test}" for test in kube_score_ignored_tests]
    ignore_tests_bash=" ".join(ignore_test_flags)
    return gentest(
        name = f"{name}_kube_score",
        data = {
            "srcs": [kustomized_rule],
            "tool": [CONFIG.KUBE_SCORE_TOOL],
        },
        test_cmd = f"""
        $(exe {CONFIG.KUBE_SCORE_TOOL}) score {ignore_tests_bash} $DATA_SRCS
        """,
        test_tools = [CONFIG.KUBE_SCORE_TOOL],
        no_test_output = True,
    )

CONFIG.setdefault('KUSTOMIZE_TOOL', 'kustomize')
CONFIG.setdefault('KUBE_SCORE_TOOL', '')
